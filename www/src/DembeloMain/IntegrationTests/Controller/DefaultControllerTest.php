<?php
/* Copyright (C) 2018 Michael Giesler
 *
 * This file is part of Dembelo.
 *
 * Dembelo is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Dembelo is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License 3 for more details.
 *
 * You should have received a copy of the GNU Affero General Public License 3
 * along with Dembelo. If not, see <http://www.gnu.org/licenses/>.
 */

namespace DembeloMain\IntegrationTests\Controller;

use DembeloMain\Document\Textnode;
use DembeloMain\Document\Topic;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * @group integration
 */
class DefaultControllerTest extends WebTestCase
{
    /**
     * @var ObjectManager
     */
    private static $em;

    /**
     * @return void
     */
    public static function setUpBeforeClass(): void
    {
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub

        self::bootKernel();

        self::$em = static::$kernel->getContainer()
            ->get('doctrine_mongodb')
            ->getManager();
    }

    /**
     * @return void
     */
    public function testReadTopicAction(): void
    {
        $topic = new Topic();
        $topic->setStatus(Topic::STATUS_ACTIVE);
        self::$em->persist($topic);

        $textnode = new Textnode();
        $textnode->setStatus(Textnode::STATUS_ACTIVE);
        $textnode->setTopicId($topic->getId());
        $textnode->setAccess(true);
        $textnode->setArbitraryId('someArbitraryId');
        self::$em->persist($textnode);
        self::$em->flush();

        $client = static::createClient();

        $client->request('GET', '/themenfeld/' . $topic->getId());

        $response = $client->getResponse();

        self::assertEquals(302, $response->getStatusCode());
        self::assertTrue($response->isRedirect('/collect/someArbitraryId'));
    }
}